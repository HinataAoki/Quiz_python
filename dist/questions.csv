問題文,解答
(コンパイラが行う処理→プログラム中の文や関数)対応する機械語の命令語に変換,演算式，代入文，判断分岐文
(プログラム中の文や関数→コンパイラが行う処理)変数宣言,プログラム内での番地を決定
(プログラム中の文や関数→コンパイラが行う処理)サブルーティン、関数、ライブラリ関数,呼び出しを認識し、受け渡すパラメータと合わせて、呼び出し系列として記述される
"(リンカが関係する部分を選べ)float x; / x=x+1; / printf(""%f\n"",x);","printf(""%f\n"",x);の部分 / 機械語のプログラムをライブラリから持ってきて、プログラムと結合"
"(コンパイラはどのような処理を行うか) double degree,radian,PI,x,y;","メモリ上に，degree, radian, PI, x, y の 5 つの変数について，double 型で必要な領域を確保する．"
(コンパイラはどのような処理をするか)radian=PI*degree/180.0; ,PI*degree/180.0 を演算し，radian に代入する機械語命令に変換する．
(コンパイラはどのような処理をするか)x=cos(radian);,radian を引数として cos 関数を呼び出す，呼び出し系列への変換と その結果を変数 y に代入する機械語命令へ変換を行う．
"(コンパイラはどのような処理をするか)printf(""cos(%5.2lf)=%lf\n"",degree,x);","""cos(%5.2lf)=%lf\n""と degree と x の 3 つを引数とする printf 関数の呼び出し系列へ変換する．"
リンカとはどのようなものか,"上記プログラムをコンパイル後に生成されるオブジェクトプログラムでは，上記の関数部分は呼び出し系列になってお
り，cos 関数，sin 関数，printf 関数の処理部分は含まれていない.
リンカは，この cos 関数，sin 関数，printf 関数について，ライブラリから cos, sin, printf のオブジェクトプログラムを取り出
して上記のオブジェクトプログラムと結合し，１つのロードプログラムとして生成する．"
ライブラリとは何か, 前もってシステムに用意されている各種の再利用可能な オブジェクトプログラムモジュール群
モジュールとは何か," ソフトウェアの世界では，まとまった仕事をする機能単位で 、
その仕事を行うために必要な1個以上のルーチンが集まっ たもの．"
計算数値ライブラリとは,"cos,sinのように、計算を行う関数のライブラリ"
静的リンクとは," プログラム実行前にすべてのものを結合する
 必要とする主記憶量が多い
 参照される可能性のある全てのものが結合される"
動的リンクとは," プログラム実行中に，必要に応じて，参照された時点で結合する方式
 実行途中の結果に応じて，その時々に必要なものだけが結合
 必要とする主記憶量は少ない"
"静的リンクと動的リンクとの違い
if x=0
then proc_a
else proc_b","静的リンクではproc_a,b両方を結合
動的リンクでは、xの値に応じてリンクする"
モジュールの共有において、静的リンクと動的リンクの違いを説明,"動的リンクの場合、それぞれでモジュールの更新が必要
静的リンクの場合、共有するモジュールの更新のみで十分"
コンパイラの5つの機能群は,字句解析、構文解析、変数割り付け、コード生成、最適化
字句解析とは, ソ－スプログラムを読み込み，区切り記号（デリミタ：delimiter）に 囲まれた構文要素を抽出
字句解析の区切り記号の例,"空白,カンマ,ピリオド,改行,(),
算術演算子,関係演算子"
文、ステートメント(Statement),プログラムを構成する単位
演算子(operator),演算を行うもの、演算を表す記号
プログラミング言語での識別子を2つ答えよ,(変数の名前、関数の名前、クラスの名前、メソッドの名前)のうち2つをこたえる
"静的リンクと動的リンクとの違い
1.いつリンクするか
2.すべてをリンクするか
3.必要な主記憶の大きさは","s=静的リンク,d=動的リンクと略記
(1)s:実行前, t:実行中に必要になった時
(2)s:使われないものも含めて、すべてリンクされる, t:必要なものだけをリンク
(3)s:多い, t:静的リンクと比べて、少ない"
"(プログラミングで使われる次の記号の名前は？) 　=, = =, <, >, <=, >= !=, <> など ",比較演算子
(プログラミングで使われる次の記号の名前は？)  =  (ただし、比較演算子とは異なる),代入演算子
(プログラミングで使われる次の記号の名前は？)　& (C 言語のみ),アドレス演算子
(プログラミングで使われる次の記号の名前は？)　&& || or and など...,関係演算子
x-y　のオペレータ、オペランド、何項オペレータか答えよ," - , xとy , 2項"
x*y　のオペレータ、オペランド、何項オペレータか答えよ," * , xとy , 2項"
"power(x, y)  ( x の y 乗を求める関数)
のオペレータ、オペランド、何項オペレータか答えよ","power , xとy , 2項"
"wa(x,y,z)　　(x+y+z を求める関数)
のオペレータ、オペランド、何項オペレータか答えよ","wa , xとyとz , 3項"
静的リンキングと動的リンキングのメリット、デメリット,"静的リンキングは
ソースプログラムのレベルで考えられるすべての場合に対処できるように、
必要なすべてのオブジェクトプログラムモジュールを結合
動的リンキングは
必要に応じて、オブジェクトプログラムモジュールを結合するため、
記憶容量が少なくて済む、モジュールの共有が可能、モジュールのみのアップデートが可能"
予約語とは何か,"プログラミング言語であらかじめ意味を持つ言葉,
識別子(変数)として使うことができない
int (C,Java), intger(VB)
if,forなど (C,Java,VB)"
識別子とは何か,"変数として保存する場所を一意に決めたり、
関数のようにひとまとまりのプログラムを指定するなどがある"
"変数の定義に当てはまるものは以下のうちからすべて選べ（Abc, 1x, x123456, x1y2z3, p1.x)","〇 (Abc, x1y2z3)
× 1x (最初は文字で始めないといけない）
× x123456(定義では7文字以上不可）
× p1.x (文字、数字以外は使えない）"
"postfix記法に直せ  a+b+c, a+(b+c)","ab+c+ , abc++"
postfix記法に直せ  a+b*c+d ,abc*+d+
(infix -> postfix) y=a-b*c+d/e,yabc*-de/+=
(infix -> postfix) a=(x+y)/(p-q)+r,(postfix記法) axy+pq-/r+=
（コンパイラ方式とインタプリタ方式の違い）実行速度は？,コンパイラー＞速い　　インタプリター＞遅い
"（コンパイラ方式とインタプリタ方式の違い）
実行速度
機械度に変換するか？
オブジェクトプログラムを生成するか
プログラムの誤りの修正は容易か否か？
ソースプログラムは完成している必要があるか？
CPUは何の機械語を実行している必要があるか？","コンパイラ方式 , インタプリタ方式
速い , 遅い
する , しない
する , しない
容易でない , 容易
必要がある , 必要がない
ロードプログラム(実行時) , インタプリタ(実行時)
コンパイラ(コンパイル時)
(さらに、リンク時はリンカ,ソースプログラム編集時はプログラムエディタの機械語プログラムエディタの機械語プログラムを実行している)…コンパイラ方式
(さらに、プログラム編集時は、プログラムエディタの機械語プログラムを実行している)…インタプリタ方式"
(infix->postfix) v=a-(p+q*r+s)/t+x*y,vapqr*+s+t/-xy*+=
BNFとは,Backus Naur Form 言語の構文規則(文法)を記述するための言語
コンパイラ方式を説明せよ,高級言語が機械語に変換されたものが生成され実行される
インタプリタ方式を説明せよ,高級言語が機械語に変換されず、インタプリタで解釈・実行するところが大事な部分
コンパイラ方式とインタプリタ方式の違いについて説明せよ,"コンパイラ方式ではソースプログラムに対応する機械語プログラムが生成されこれを CPU が実行するが，
インタプリタでは，ソースプログラムに対応する機械語プログラムは生成されないこと、CPU はインタプリタを実行していること"
中間言語はどのようなものか説明せよ,"前もって、ソースプログラム全体を文法解析し、模擬的に実行できる形式
インタプリタが解釈・実行を行う
ソースプログラム→コンパイラ→中間言語形式のプログラム→インタプリタ
オブジェクトプログラムは生成されない"
"コンパイラ形式の言語はWindows用、Mac用のコンパイラでコンパイルすると、
同じプログラムをどちらのコンピュータでも動かすことができるので（＿＿＿）と呼ばれている。","コンパイラ形式の言語（C 言語など）は，Windows 上で動かす時は，Windows 用のコンパイラを使い，Mac 上で動かすと
きは，Mac 用のコンパイラを使うことで，同じ C 言語のプログラムをどちらのコンピュータ上でも動かすことができるので，
コンパイル前の言語は，（A：機械独立）である． "
"コンパイル後のロードプログラムは，Windows 用のコンパイラで生成された物は，
Mac 上で直接動かすことが（B：_______）ので，（C：_____）である．","コンパイル後のロードプログラムは，Windows 用のコンパイラで生成された物は，
Mac 上で直接動かすことが（B：できない）ので，（C：機械依存）である．"
"JAVA で書かれたソースプログラムは，JAVA のコンパイラでコンパイルすることで、
（______）形式のファイルが生成される","JAVA で書かれたソースプログラムは，JAVA のコンパイラでコンパイルすることで，
（D:中間言語）形式のファイルが生成される．"
この中間言語は，CPU にとって（______）な言語である．,この中間言語は，CPU にとって（E:意味不明）な言語である。
中間言語は，（H）によって実行される．中間言語は，（H）にと って（F）な言語であるので，（G）みたいなものである．,中間言語は，（H：JVM）によって実行される．（D）は，（H）にと って（F：直接解釈し実行可能）な言語であるので，（G：機械語）みたいなものである．
